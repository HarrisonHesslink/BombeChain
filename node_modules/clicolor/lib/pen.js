"use strict";
const antsy_1 = require("antsy");
class Pen {
    constructor(color, backgroundColor, bold, underline, italic, padding) {
        this.color = color;
        this.backgroundColor = backgroundColor;
        this.bold = bold;
        this.underline = underline;
        this.italic = italic;
        this.padding = padding;
    }
    toString() {
        const flags = [];
        if (this.color)
            flags.push(`color=${this.color}`);
        if (this.backgroundColor)
            flags.push(`backgroundColor=${this.backgroundColor}`);
        if (this.bold)
            flags.push("bold");
        if (this.underline)
            flags.push("underline");
        if (this.italic)
            flags.push("italic");
        if (this.padding != null)
            flags.push(`pad=${this.padding}`);
        return `Pen(${flags.join(", ")})`;
    }
    copy() {
        return new Pen(this.color, this.backgroundColor, this.bold, this.underline, this.italic, this.padding);
    }
    merge(other) {
        const rv = this.copy();
        if (other.color != null)
            rv.color = other.color;
        if (other.backgroundColor != null)
            rv.backgroundColor = other.backgroundColor;
        if (other.bold != null)
            rv.bold = other.bold;
        if (other.underline != null)
            rv.underline = other.underline;
        if (other.italic != null)
            rv.italic = other.italic;
        if (other.padding != null)
            rv.padding = other.padding;
        return rv;
    }
    render(active) {
        let out = "";
        if (active.backgroundColor != this.backgroundColor) {
            if (!this.backgroundColor) {
                out += `\u001b[49m`;
            }
            else {
                const c = antsy_1.get_color(this.backgroundColor);
                out += (c < 8) ? `\u001b[4${c}m` : `\u001b[48;5;${c}m`;
            }
        }
        if (active.color != this.color) {
            if (!this.color) {
                out += `\u001b[39m`;
            }
            else {
                const c = antsy_1.get_color(this.color);
                out += (c < 8) ? `\u001b[3${c}m` : `\u001b[38;5;${c}m`;
            }
        }
        if (active.bold != this.bold) {
            out += this.bold ? "\u001b[1m" : "\u001b[22m";
        }
        if (active.underline != this.underline) {
            out += this.underline ? "\u001b[4m" : "\u001b[24m";
        }
        if (active.italic != this.italic) {
            out += this.italic ? "\u001b[3m" : "\u001b[23m";
        }
        return out;
    }
    static make(options = {}) {
        return new Pen(options.color, options.backgroundColor, options.bold, options.underline, options.italic, options.padLeft != null ? -options.padLeft : options.padRight);
    }
    static format(descriptors) {
        const rv = new Map();
        for (const k in descriptors)
            rv.set(k, Pen.make(descriptors[k]));
        return rv;
    }
}
exports.Pen = Pen;
exports.EMPTY_PEN = Pen.make();
//# sourceMappingURL=pen.js.map