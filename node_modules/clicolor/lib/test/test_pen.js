"use strict";
const pen_1 = require("../pen");
require("should");
require("source-map-support/register");
describe("Pen", () => {
    it("bold", () => {
        pen_1.Pen.make({ bold: true }).render(pen_1.EMPTY_PEN).should.eql("\u001b[1m");
        pen_1.EMPTY_PEN.render(pen_1.Pen.make({ bold: true })).should.eql("\u001b[22m");
    });
    it("underline", () => {
        pen_1.Pen.make({ underline: true }).render(pen_1.EMPTY_PEN).should.eql("\u001b[4m");
        pen_1.EMPTY_PEN.render(pen_1.Pen.make({ underline: true })).should.eql("\u001b[24m");
    });
    it("italic", () => {
        pen_1.Pen.make({ italic: true }).render(pen_1.EMPTY_PEN).should.eql("\u001b[3m");
        pen_1.EMPTY_PEN.render(pen_1.Pen.make({ italic: true })).should.eql("\u001b[23m");
    });
    it("colors", () => {
        pen_1.Pen.make({ color: "#f00" }).render(pen_1.EMPTY_PEN).should.eql("\u001b[38;5;9m");
        pen_1.Pen.make({ color: "#888" }).render(pen_1.EMPTY_PEN).should.eql("\u001b[38;5;102m");
        pen_1.Pen.make({ backgroundColor: "#f00" }).render(pen_1.EMPTY_PEN).should.eql("\u001b[48;5;9m");
        pen_1.Pen.make({ backgroundColor: "#888" }).render(pen_1.EMPTY_PEN).should.eql("\u001b[48;5;102m");
        pen_1.Pen.make({ color: "red", backgroundColor: "blue" }).render(pen_1.EMPTY_PEN).should.eql("\u001b[48;5;12m\u001b[38;5;9m");
        pen_1.EMPTY_PEN.render(pen_1.Pen.make({ color: "red", backgroundColor: "blue" })).should.eql("\u001b[49m\u001b[39m");
    });
    it("merge", () => {
        const pen1 = pen_1.Pen.make({ color: "red", underline: true });
        const pen2 = pen_1.Pen.make({ bold: true });
        const pen3 = pen_1.Pen.make({ color: "blue", bold: true });
        pen1.merge(pen2).toString().should.eql("Pen(color=red, bold, underline)");
        pen2.merge(pen1).toString().should.eql("Pen(color=red, bold, underline)");
        pen1.merge(pen3).toString().should.eql("Pen(color=blue, bold, underline)");
        pen3.merge(pen1).toString().should.eql("Pen(color=red, bold, underline)");
        pen2.merge(pen3).toString().should.eql("Pen(color=blue, bold)");
        pen3.merge(pen2).toString().should.eql("Pen(color=blue, bold)");
    });
    it("format", () => {
        const f = pen_1.Pen.format({
            error: { color: "red", bold: true },
            timestamp: { color: "cyan" }
        });
        Array.from(f.keys()).sort().should.eql(["error", "timestamp"]);
        (f.get("error") || pen_1.EMPTY_PEN).toString().should.eql("Pen(color=red, bold)");
        (f.get("timestamp") || pen_1.EMPTY_PEN).toString().should.eql("Pen(color=cyan)");
    });
});
//# sourceMappingURL=test_pen.js.map