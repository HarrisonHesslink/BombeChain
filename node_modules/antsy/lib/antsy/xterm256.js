"use strict";
var color_names_1 = require("./color_names");
var range = function (start, end) {
    var rv = new Array(end - start);
    for (var i = start; i < end; i++)
        rv[i - start] = i;
    return rv;
};
var COLOR_CUBE = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];
var GRAY_LINE = range(0, 24).map(function (i) { return 8 + 10 * i; });
var ANSI_LINE = range(0, 16).map(function (i) {
    var c = (i & 8) != 0 ? 0xff : 0x80;
    return [
        (i & 1) != 0 ? c : 0,
        (i & 2) != 0 ? c : 0,
        (i & 4) != 0 ? c : 0
    ];
});
var CUBE_OFFSET = 16;
var GRAY_OFFSET = 232;
ANSI_LINE[8] = ANSI_LINE[7];
ANSI_LINE[7] = [0xc0, 0xc0, 0xc0];
var HEX_RE = /^[\da-fA-F]{3}([\da-fA-F]{3})?$/;
var cache = {};
function get_color(name) {
    if (color_names_1.COLOR_NAMES[name])
        name = color_names_1.COLOR_NAMES[name];
    if (name[0] == "#")
        name = name.slice(1);
    if (name.match(HEX_RE))
        return color_from_hex(name);
    return 7;
}
exports.get_color = get_color;
function color_from_hex(hex) {
    if (cache[hex] != null)
        return cache[hex];
    var realhex = hex.length == 3 ? hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] : hex;
    var _a = [
        parseInt(realhex.slice(0, 2), 16),
        parseInt(realhex.slice(2, 4), 16),
        parseInt(realhex.slice(4, 6), 16)
    ], red = _a[0], green = _a[1], blue = _a[2];
    var index = nearest_color(red, green, blue);
    cache[hex] = index;
    return index;
}
exports.color_from_hex = color_from_hex;
function nearest_color(red, green, blue) {
    var _a = nearest_color_cube(red, green, blue), cube_index = _a[0], cube_distance = _a[1];
    var _b = nearest_gray(red, green, blue), gray_index = _b[0], gray_distance = _b[1];
    var _c = nearest_ansi(red, green, blue), ansi_index = _c[0], ansi_distance = _c[1];
    if (cube_distance < gray_distance && cube_distance < ansi_distance) {
        return CUBE_OFFSET + cube_index;
    }
    else if (gray_distance < ansi_distance) {
        return GRAY_OFFSET + gray_index;
    }
    else {
        return ansi_index;
    }
}
exports.nearest_color = nearest_color;
function nearest_color_cube(red, green, blue) {
    var redi = find_closest(red, COLOR_CUBE);
    var greeni = find_closest(green, COLOR_CUBE);
    var bluei = find_closest(blue, COLOR_CUBE);
    var distance = color_distance(COLOR_CUBE[redi], COLOR_CUBE[greeni], COLOR_CUBE[bluei], red, green, blue);
    return [36 * redi + 6 * greeni + bluei, distance];
}
exports.nearest_color_cube = nearest_color_cube;
function nearest_gray(red, green, blue) {
    var gray = (red + green + blue) / 3;
    var i = find_closest(gray, GRAY_LINE);
    var distance = color_distance(GRAY_LINE[i], GRAY_LINE[i], GRAY_LINE[i], red, green, blue);
    return [i, distance];
}
exports.nearest_gray = nearest_gray;
function nearest_ansi(red, green, blue) {
    var distances = ANSI_LINE.map(function (_a) {
        var r = _a[0], g = _a[1], b = _a[2];
        return color_distance(r, g, b, red, green, blue);
    });
    var i = find_closest(0, distances);
    return [i, distances[i]];
}
exports.nearest_ansi = nearest_ansi;
function color_distance(red1, green1, blue1, red2, green2, blue2) {
    return Math.sqrt(Math.pow(red1 - red2, 2) + Math.pow(green1 - green2, 2) + Math.pow(blue1 - blue2, 2));
}
function find_closest(n, list) {
    return list.map(function (item, index) { return [Math.abs(item - n), index]; }).sort(function (a, b) { return a[0] - b[0]; })[0][1];
}
//# sourceMappingURL=xterm256.js.map