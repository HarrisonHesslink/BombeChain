"use strict";
var xterm256 = require("./xterm256");
var SPACE = " ".charCodeAt(0);
var UNDERLINE_START = "\u001b[4m";
var UNDERLINE_STOP = "\u001b[24m";
exports.RESET_ATTRIBUTES = "\u001b[0m";
function fgString(index) { return "\u001B[38;5;" + index + "m"; }
function bgString(index) { return "\u001B[48;5;" + index + "m"; }
exports.TRANSPARENT = -1;
var WHITE = xterm256.get_color("white");
var BLACK = xterm256.get_color("black");
var Canvas = (function () {
    function Canvas(width, height) {
        this.width = width;
        this.height = height;
        this.grid = new Array(this.width * this.height);
        this.fg = WHITE;
        this.bg = BLACK;
        this.clear();
        this.y = 0;
        this.x = 0;
    }
    Canvas.prototype.color = function (c) {
        this.fg = typeof c === "string" ? xterm256.get_color(c) : c;
        return this;
    };
    Canvas.prototype.backgroundColor = function (c) {
        this.bg = typeof c === "string" ? xterm256.get_color(c) : c;
        return this;
    };
    Canvas.prototype.at = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    Canvas.prototype.write = function (s) {
        for (var i = 0; i < s.length; i++) {
            this._put(this.x, this.y, this.bg, this.fg, s[i]);
            this.x += 1;
            if (this.x >= this.width) {
                this.x = 0;
                this.y += 1;
                if (this.y >= this.height) {
                    this.y = 0;
                }
            }
        }
        return this;
    };
    Canvas.prototype.clear = function () {
        this.fillBackground(this.bg == exports.TRANSPARENT ? BLACK : this.bg);
        return this;
    };
    Canvas.prototype.scroll = function (deltaX, deltaY) {
        var directionX = deltaX < 0 ? -1 : 1;
        var directionY = deltaY < 0 ? -1 : 1;
        var absX = Math.abs(deltaX);
        var absY = Math.abs(deltaY);
        var bg = this.bg == exports.TRANSPARENT ? BLACK : this.bg;
        var blank = bg * Math.pow(2, 28) + SPACE;
        if (absX >= this.width || absY >= this.height) {
            this.clear();
            return this;
        }
        var destX = directionX > 0 ? 0 : absX;
        var sourceX = directionX > 0 ? absX : 0;
        var widthX = this.width - absX;
        for (var i = 0; i < this.height - absY; i++) {
            var destY = directionY > 0 ? i : this.height - i - 1;
            var destIndex = destY * this.width + destX;
            var sourceY = destY + deltaY;
            var sourceIndex = sourceY * this.width + sourceX;
            if (directionX > 0) {
                for (var j = 0; j < widthX; j++)
                    this.grid[destIndex + j] = this.grid[sourceIndex + j];
            }
            else {
                for (var j = widthX - 1; j >= 0; j--)
                    this.grid[destIndex + j] = this.grid[sourceIndex + j];
            }
        }
        for (var i = 0; i < absY; i++) {
            var y = directionY > 0 ? this.height - i - 1 : i;
            var index = y * this.width;
            for (var x = 0; x < this.width; x++) {
                this.grid[index + x] = blank;
            }
        }
        for (var i = 0; i < absX; i++) {
            var x = directionX > 0 ? this.width - i - 1 : i;
            for (var y = 0; y < this.height; y++) {
                this.grid[y * this.width + x] = blank;
            }
        }
        return this;
    };
    Canvas.prototype.fillBackground = function (color) {
        this.backgroundColor(color);
        for (var i = 0; i < this.width * this.height; i++) {
            this._puti(i, this.bg, this.fg, SPACE);
        }
        return this;
    };
    Canvas.prototype.toStrings = function (options) {
        if (options === void 0) { options = {}; }
        var rv = [];
        for (var y = 0; y < this.height; y++) {
            var line = "";
            var lastbg = -1;
            var lastfg = -1;
            var allBlank = true;
            for (var x = 0; x < this.width; x++) {
                var _a = this._get(x, y), bg = _a[0], fg = _a[1], ch = _a[2];
                if (lastbg != bg)
                    line += bgString(bg);
                if (lastfg != fg)
                    line += fgString(fg);
                lastbg = bg;
                lastfg = fg;
                line += String.fromCharCode(ch);
                if (ch != SPACE)
                    allBlank = false;
            }
            line += exports.RESET_ATTRIBUTES;
            rv.push(options.dropBlanks && allBlank ? "" : line);
        }
        return rv;
    };
    Canvas.prototype._put = function (x, y, bg, fg, ch) {
        this._puti(y * this.width + x, bg, fg, typeof ch === "string" ? ch.charCodeAt(0) : ch);
    };
    Canvas.prototype._puti = function (index, bg, fg, ch) {
        if (bg == exports.TRANSPARENT || fg == exports.TRANSPARENT) {
            var _a = this._geti(index), oldbg = _a[0], oldfg = _a[1], _ = _a[2];
            if (bg == exports.TRANSPARENT)
                bg = oldbg;
            if (fg == exports.TRANSPARENT)
                fg = oldfg;
        }
        this.grid[index] = bg * Math.pow(2, 28) + fg * Math.pow(2, 20) + ch;
    };
    Canvas.prototype._get = function (x, y) {
        return this._geti(y * this.width + x);
    };
    Canvas.prototype._geti = function (index) {
        var cell = this.grid[index];
        var colors = Math.floor(cell / Math.pow(2, 20)) & 0xffff;
        return [colors >> 8, colors & 0xff, cell & 0xfffff];
    };
    return Canvas;
}());
exports.Canvas = Canvas;
//# sourceMappingURL=canvas.js.map